// This is your Prisma schema file,

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üìã User Model - Core entity representing users with roles and relationships
model User {
  id                  Int            @id @default(autoincrement())
  username            String         @unique
  email               String?        // Optional during signup, required for role upgrades
  phone               String?        // Optional, for alternative contact
  password            String         // Hashed password
  profilePicture      String?
  role                Role           @relation(fields: [roleId], references: [id])
  roleId              Int
  profile             Profile?
  shops               Shop[]         // Shops owned by Retailer/Merchant
  warehouse           Warehouse?     // Warehouse owned by Supplier
  orders              Order[]        // Orders placed by Customer
  notifications       Notification[] // Notifications received
  retailerConnections Connection[]   @relation("RetailerConnection")
  supplierConnections Connection[]   @relation("SupplierConnection")
  courierConnections  Connection[]   @relation("CourierConnection")
  soldShops           ShopSale[]     @relation("SellerShopSale")
  boughtShops         ShopSale[]     @relation("BuyerShopSale")
  roleRequest         RoleRequest[]
  actions             RoleRequest[]  @relation("AdminAction") // Actions taken by this admin
  carts               Cart[]         @relation("CartUser")    // Opposite relation for Cart
  wishlists           Wishlist[]     @relation("WishlistUser") // Opposite relation for Wishlist
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

// üé≠ Role Model - Defines user roles with unique names
model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique // Developer, PlatformAdmin, OperationsAdmin, Retailer, Merchant, Supplier, Courier, Customer
  users User[]
}

enum RoleRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// üìù Role Request Model - Tracks role change requests with status
model RoleRequest {
  id            Int               @id @default(autoincrement())
  userId        Int
  user          User              @relation(fields: [userId], references: [id])
  requestedRole String            // ‚û°Ô∏è e.g., "Retailer"
  status        RoleRequestStatus @default(PENDING) // Using the enum here
  adminId       Int?              // ‚û°Ô∏è Tracking "Developer" who approves/rejects
  admin         User?             @relation("AdminAction", fields: [adminId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

// üë§ Profile Model - Additional user info like name and address
model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  address   String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ShopStatus {
  PENDING
  APPROVED
  REJECTED
}

// üè™ Shop Model - Owned by Retailer or Merchant with status tracking
model Shop {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  owner       User         @relation(fields: [ownerId], references: [id])
  products    Product[]    // Direct relation to products
  sales       ShopSale[]   // Shops listed for sale
  connections Connection[] // Connections with Suppliers/Couriers
  orders      Order[]      @relation("ShopOrders") // Added inverse relation
  status      ShopStatus   @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// üì¶ Product Model - Items in inventory with category and warehouse relations
model Product {
  id          Int        @id @default(autoincrement())
  shopId      Int        // Direct relation to Shop
  shop        Shop       @relation(fields: [shopId], references: [id])
  warehouseId Int?       // Added for Warehouse relation (Optional relation)
  warehouse   Warehouse? @relation("WarehouseProducts", fields: [warehouseId], references: [id]) // Added inverse relation
  name        String
  description String?
  price       Float
  stock       Int
  categoryId  Int?
  category    Category?  @relation(fields: [categoryId], references: [id]) // e.g., Electronics, Clothing
  orders      Order[]    // Added relation to orders
  carts       Cart[]     @relation("CartProduct")    // Opposite relation for Cart
  wishlists   Wishlist[] @relation("WishlistProduct") // Opposite relation for Wishlist
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// üè≠ Warehouse Model - Owned by Supplier with product storage
model Warehouse {
  id          Int          @id @default(autoincrement())
  supplierId  Int          @unique
  supplier    User         @relation(fields: [supplierId], references: [id])
  name        String
  location    String?
  products    Product[]    @relation("WarehouseProducts") // Products in warehouse
  connections Connection[] @relation("WarehouseConnections") // Connections with Retailers/Merchants
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// ü§ù Connection Model - Links Retailer-Supplier or Retailer-Courier
model Connection {
  id          Int        @id @default(autoincrement())
  retailerId  Int        // Retailer or Merchant
  supplierId  Int?       // Optional, for Retailer-Supplier
  courierId   Int?       // Optional, for Retailer-Courier
  status      String     // Pending, Approved, Rejected
  retailer    User       @relation("RetailerConnection", fields: [retailerId], references: [id])
  supplier    User?      @relation("SupplierConnection", fields: [supplierId], references: [id])
  courier     User?      @relation("CourierConnection", fields: [courierId], references: [id])
  shopId      Int
  shop        Shop       @relation(fields: [shopId], references: [id])
  warehouseId Int?       // Added for Warehouse relation (Optional relation)
  warehouse   Warehouse? @relation("WarehouseConnections", fields: [warehouseId], references: [id]) // Added inverse relation
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// üè∑Ô∏è Shop Sale Model - Tracks shops for sale or sale requests
model ShopSale {
  id        Int      @id @default(autoincrement())
  shopId    Int
  shop      Shop     @relation(fields: [shopId], references: [id])
  sellerId  Int
  seller    User     @relation("SellerShopSale", fields: [sellerId], references: [id])
  buyerId   Int?     // Optional, for direct sale requests
  buyer     User?    @relation("BuyerShopSale", fields: [buyerId], references: [id])
  price     Float
  status    String   // Listed, Pending, Approved, Rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üõí Order Model - Customer purchases with status tracking
model Order {
  id         Int      @id @default(autoincrement())
  userId     Int      // Changed from customerId to userId for consistency
  user       User     @relation(fields: [userId], references: [id])
  shopId     Int
  shop       Shop     @relation("ShopOrders", fields: [shopId], references: [id])
  productId  Int      // Added to link to a specific product
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int      @default(1) // Added quantity field
  total      Float
  status     String // Processing, Shipped, Delivered
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// üîî Notification Model - In-app notifications for users
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  type      String   // RoleUpgrade, SaleApproval, OrderUpdate
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// üõçÔ∏è Cart Model - User shopping cart with unique user-product pairs
model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], name: "CartUser")
  productId Int
  product   Product  @relation(fields: [productId], references: [id], name: "CartProduct")
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Unique constraint for composite key
}

// ‚ù§Ô∏è Wishlist Model - User wishlist with unique user-product pairs
model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], name: "WishlistUser")
  productId Int
  product   Product  @relation(fields: [productId], references: [id], name: "WishlistProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Unique constraint for composite key
}

// üìë Category Model - Product categories with unique names
model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
